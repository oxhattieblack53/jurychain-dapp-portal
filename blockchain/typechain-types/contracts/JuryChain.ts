/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace JuryChain {
  export type CaseFullDetailsStruct = {
    caseId: BigNumberish;
    judge: AddressLike;
    deadline: BigNumberish;
    isClosed: boolean;
    metadataURI: string;
    votesCast: BigNumberish;
    jurorCount: BigNumberish;
    jurors: AddressLike[];
    hasVoted: boolean;
  };

  export type CaseFullDetailsStructOutput = [
    caseId: bigint,
    judge: string,
    deadline: bigint,
    isClosed: boolean,
    metadataURI: string,
    votesCast: bigint,
    jurorCount: bigint,
    jurors: string[],
    hasVoted: boolean
  ] & {
    caseId: bigint;
    judge: string;
    deadline: bigint;
    isClosed: boolean;
    metadataURI: string;
    votesCast: bigint;
    jurorCount: bigint;
    jurors: string[];
    hasVoted: boolean;
  };

  export type CaseSummaryStruct = {
    caseId: BigNumberish;
    judge: AddressLike;
    deadline: BigNumberish;
    isClosed: boolean;
    metadataURI: string;
    votesCast: BigNumberish;
    jurorCount: BigNumberish;
  };

  export type CaseSummaryStructOutput = [
    caseId: bigint,
    judge: string,
    deadline: bigint,
    isClosed: boolean,
    metadataURI: string,
    votesCast: bigint,
    jurorCount: bigint
  ] & {
    caseId: bigint;
    judge: string;
    deadline: bigint;
    isClosed: boolean;
    metadataURI: string;
    votesCast: bigint;
    jurorCount: bigint;
  };
}

export interface JuryChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "castVote"
      | "castVoteDev"
      | "closeCase"
      | "createCase"
      | "getBatchCaseDetails"
      | "getCase"
      | "getCaseFullDetails"
      | "getCaseIds"
      | "getCaseJurors"
      | "getEncryptedTallies"
      | "getPlainTallies"
      | "grantResultAccess"
      | "hasVoted"
      | "protocolId"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CaseClosed"
      | "CaseCreated"
      | "ResultAccessGranted"
      | "VoteSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteDev",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "closeCase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCase",
    values: [string, AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchCaseDetails",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCaseFullDetails",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCaseIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCaseJurors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedTallies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlainTallies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantResultAccess",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteDev",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeCase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createCase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBatchCaseDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCaseFullDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCaseIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCaseJurors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedTallies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlainTallies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantResultAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
}

export namespace CaseClosedEvent {
  export type InputTuple = [caseId: BigNumberish];
  export type OutputTuple = [caseId: bigint];
  export interface OutputObject {
    caseId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CaseCreatedEvent {
  export type InputTuple = [caseId: BigNumberish, judge: AddressLike];
  export type OutputTuple = [caseId: bigint, judge: string];
  export interface OutputObject {
    caseId: bigint;
    judge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultAccessGrantedEvent {
  export type InputTuple = [caseId: BigNumberish, account: AddressLike];
  export type OutputTuple = [caseId: bigint, account: string];
  export interface OutputObject {
    caseId: bigint;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteSubmittedEvent {
  export type InputTuple = [caseId: BigNumberish, juror: AddressLike];
  export type OutputTuple = [caseId: bigint, juror: string];
  export interface OutputObject {
    caseId: bigint;
    juror: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JuryChain extends BaseContract {
  connect(runner?: ContractRunner | null): JuryChain;
  waitForDeployment(): Promise<this>;

  interface: JuryChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  castVote: TypedContractMethod<
    [
      caseId: BigNumberish,
      encryptedGuiltyFlag: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  castVoteDev: TypedContractMethod<
    [caseId: BigNumberish, isGuilty: boolean],
    [void],
    "nonpayable"
  >;

  closeCase: TypedContractMethod<[caseId: BigNumberish], [void], "nonpayable">;

  createCase: TypedContractMethod<
    [
      metadataURI: string,
      jurors: AddressLike[],
      votingPeriodSeconds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getBatchCaseDetails: TypedContractMethod<
    [caseIds: BigNumberish[], viewer: AddressLike],
    [JuryChain.CaseFullDetailsStructOutput[]],
    "view"
  >;

  getCase: TypedContractMethod<
    [caseId: BigNumberish],
    [JuryChain.CaseSummaryStructOutput],
    "view"
  >;

  getCaseFullDetails: TypedContractMethod<
    [caseId: BigNumberish, viewer: AddressLike],
    [JuryChain.CaseFullDetailsStructOutput],
    "view"
  >;

  getCaseIds: TypedContractMethod<[], [bigint[]], "view">;

  getCaseJurors: TypedContractMethod<
    [caseId: BigNumberish],
    [string[]],
    "view"
  >;

  getEncryptedTallies: TypedContractMethod<
    [caseId: BigNumberish],
    [[string, string] & { guilty: string; notGuilty: string }],
    "view"
  >;

  getPlainTallies: TypedContractMethod<
    [caseId: BigNumberish],
    [[bigint, bigint] & { guilty: bigint; notGuilty: bigint }],
    "view"
  >;

  grantResultAccess: TypedContractMethod<
    [caseId: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasVoted: TypedContractMethod<
    [caseId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [
      caseId: BigNumberish,
      encryptedGuiltyFlag: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteDev"
  ): TypedContractMethod<
    [caseId: BigNumberish, isGuilty: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closeCase"
  ): TypedContractMethod<[caseId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createCase"
  ): TypedContractMethod<
    [
      metadataURI: string,
      jurors: AddressLike[],
      votingPeriodSeconds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBatchCaseDetails"
  ): TypedContractMethod<
    [caseIds: BigNumberish[], viewer: AddressLike],
    [JuryChain.CaseFullDetailsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCase"
  ): TypedContractMethod<
    [caseId: BigNumberish],
    [JuryChain.CaseSummaryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCaseFullDetails"
  ): TypedContractMethod<
    [caseId: BigNumberish, viewer: AddressLike],
    [JuryChain.CaseFullDetailsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCaseIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCaseJurors"
  ): TypedContractMethod<[caseId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEncryptedTallies"
  ): TypedContractMethod<
    [caseId: BigNumberish],
    [[string, string] & { guilty: string; notGuilty: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlainTallies"
  ): TypedContractMethod<
    [caseId: BigNumberish],
    [[bigint, bigint] & { guilty: bigint; notGuilty: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantResultAccess"
  ): TypedContractMethod<
    [caseId: BigNumberish, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [caseId: BigNumberish, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CaseClosed"
  ): TypedContractEvent<
    CaseClosedEvent.InputTuple,
    CaseClosedEvent.OutputTuple,
    CaseClosedEvent.OutputObject
  >;
  getEvent(
    key: "CaseCreated"
  ): TypedContractEvent<
    CaseCreatedEvent.InputTuple,
    CaseCreatedEvent.OutputTuple,
    CaseCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ResultAccessGranted"
  ): TypedContractEvent<
    ResultAccessGrantedEvent.InputTuple,
    ResultAccessGrantedEvent.OutputTuple,
    ResultAccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "VoteSubmitted"
  ): TypedContractEvent<
    VoteSubmittedEvent.InputTuple,
    VoteSubmittedEvent.OutputTuple,
    VoteSubmittedEvent.OutputObject
  >;

  filters: {
    "CaseClosed(uint256)": TypedContractEvent<
      CaseClosedEvent.InputTuple,
      CaseClosedEvent.OutputTuple,
      CaseClosedEvent.OutputObject
    >;
    CaseClosed: TypedContractEvent<
      CaseClosedEvent.InputTuple,
      CaseClosedEvent.OutputTuple,
      CaseClosedEvent.OutputObject
    >;

    "CaseCreated(uint256,address)": TypedContractEvent<
      CaseCreatedEvent.InputTuple,
      CaseCreatedEvent.OutputTuple,
      CaseCreatedEvent.OutputObject
    >;
    CaseCreated: TypedContractEvent<
      CaseCreatedEvent.InputTuple,
      CaseCreatedEvent.OutputTuple,
      CaseCreatedEvent.OutputObject
    >;

    "ResultAccessGranted(uint256,address)": TypedContractEvent<
      ResultAccessGrantedEvent.InputTuple,
      ResultAccessGrantedEvent.OutputTuple,
      ResultAccessGrantedEvent.OutputObject
    >;
    ResultAccessGranted: TypedContractEvent<
      ResultAccessGrantedEvent.InputTuple,
      ResultAccessGrantedEvent.OutputTuple,
      ResultAccessGrantedEvent.OutputObject
    >;

    "VoteSubmitted(uint256,address)": TypedContractEvent<
      VoteSubmittedEvent.InputTuple,
      VoteSubmittedEvent.OutputTuple,
      VoteSubmittedEvent.OutputObject
    >;
    VoteSubmitted: TypedContractEvent<
      VoteSubmittedEvent.InputTuple,
      VoteSubmittedEvent.OutputTuple,
      VoteSubmittedEvent.OutputObject
    >;
  };
}
