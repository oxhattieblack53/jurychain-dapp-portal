/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { JuryChain, JuryChainInterface } from "../../contracts/JuryChain";

const _abi = [
  {
    inputs: [],
    name: "AlreadyVoted",
    type: "error",
  },
  {
    inputs: [],
    name: "CaseClosedAlready",
    type: "error",
  },
  {
    inputs: [],
    name: "CaseNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "NotJuror",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "VotingActive",
    type: "error",
  },
  {
    inputs: [],
    name: "VotingClosed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
    ],
    name: "CaseClosed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "judge",
        type: "address",
      },
    ],
    name: "CaseCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ResultAccessGranted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "juror",
        type: "address",
      },
    ],
    name: "VoteSubmitted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
      {
        internalType: "externalEuint32",
        name: "encryptedGuiltyFlag",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "inputProof",
        type: "bytes",
      },
    ],
    name: "castVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isGuilty",
        type: "bool",
      },
    ],
    name: "castVoteDev",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
    ],
    name: "closeCase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "metadataURI",
        type: "string",
      },
      {
        internalType: "address[]",
        name: "jurors",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "votingPeriodSeconds",
        type: "uint256",
      },
    ],
    name: "createCase",
    outputs: [
      {
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "caseIds",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "viewer",
        type: "address",
      },
    ],
    name: "getBatchCaseDetails",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "caseId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "judge",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isClosed",
            type: "bool",
          },
          {
            internalType: "string",
            name: "metadataURI",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "votesCast",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "jurorCount",
            type: "uint256",
          },
          {
            internalType: "address[]",
            name: "jurors",
            type: "address[]",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
        ],
        internalType: "struct JuryChain.CaseFullDetails[]",
        name: "allDetails",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
    ],
    name: "getCase",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "caseId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "judge",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isClosed",
            type: "bool",
          },
          {
            internalType: "string",
            name: "metadataURI",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "votesCast",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "jurorCount",
            type: "uint256",
          },
        ],
        internalType: "struct JuryChain.CaseSummary",
        name: "summary",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "viewer",
        type: "address",
      },
    ],
    name: "getCaseFullDetails",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "caseId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "judge",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isClosed",
            type: "bool",
          },
          {
            internalType: "string",
            name: "metadataURI",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "votesCast",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "jurorCount",
            type: "uint256",
          },
          {
            internalType: "address[]",
            name: "jurors",
            type: "address[]",
          },
          {
            internalType: "bool",
            name: "hasVoted",
            type: "bool",
          },
        ],
        internalType: "struct JuryChain.CaseFullDetails",
        name: "details",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCaseIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
    ],
    name: "getCaseJurors",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
    ],
    name: "getEncryptedTallies",
    outputs: [
      {
        internalType: "euint32",
        name: "guilty",
        type: "bytes32",
      },
      {
        internalType: "euint32",
        name: "notGuilty",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
    ],
    name: "getPlainTallies",
    outputs: [
      {
        internalType: "uint32",
        name: "guilty",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "notGuilty",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "grantResultAccess",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "caseId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "hasVoted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b5061018a6100ae604080516080810182525f808252602082018190529181018290526060810191909152506040805160808101825273687820221192c5b662b25367f70076a37bc79b6c815273848b0066793bcc60346da1f49049357399b8d595602082015273a02cda4ca3a71d7c46997716f4283aa851c2881291810191909152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac606082015290565b80517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970080546001600160a01b03199081166001600160a01b039384161790915560208301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497018054831691841691909117905560408301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497028054831691841691909117905560608301517f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497038054909216921691909117905550565b6120aa806101975f395ff3fe608060405234801561000f575f80fd5b50600436106100e5575f3560e01c80638589c7a511610088578063c687551d11610063578063c687551d14610208578063c6e5764b14610230578063da1f12ab14610250578063e225a22114610262575f80fd5b80638589c7a5146101c2578063a91a1080146101d5578063ae787667146101f5575f80fd5b80633ffad912116100c35780633ffad91214610157578063438596321461016c5780635144173f1461018f5780637035aba2146101a2575f80fd5b80630f8853b7146100e95780631674d59a146101075780632067e17a14610127575b5f80fd5b6100f1610275565b6040516100fe919061191c565b60405180910390f35b61011a6101153660046119c2565b6102cb565b6040516100fe9190611b3f565b61013a610135366004611ba1565b610518565b6040805163ffffffff9384168152929091166020830152016100fe565b61016a610165366004611ba1565b61058e565b005b61017f61017a366004611bb8565b610743565b60405190151581526020016100fe565b61016a61019d366004611bb8565b61079f565b6101b56101b0366004611ba1565b61087a565b6040516100fe9190611be2565b61016a6101d0366004611c60565b61091b565b6101e86101e3366004611ba1565b610b77565b6040516100fe9190611caf565b61016a610203366004611d1d565b610cd9565b61021b610216366004611ba1565b610f78565b604080519283526020830191909152016100fe565b61024361023e366004611bb8565b610fe9565b6040516100fe9190611d4f565b6127115b6040519081526020016100fe565b610254610270366004611d61565b6111a3565b606060038054806020026020016040519081016040528092919081815260200182805480156102c157602002820191905f5260205f20905b8154815260200190600101908083116102ad575b5050505050905090565b60608267ffffffffffffffff8111156102e6576102e6611dcf565b60405190808252806020026020018201604052801561031f57816020015b61030c61185e565b8152602001906001900390816103045790505b5090505f5b83811015610510575f85858381811061033f5761033f611de3565b602090810292909201355f818152600190935260409092208054929350916001600160a01b03169050610373575050610508565b604080516101208101825283815282546001600160a01b03166020820152600183015491810191909152600282015460ff16151560608201526003820180546080830191906103c190611df7565b80601f01602080910402602001604051908101604052809291908181526020018280546103ed90611df7565b80156104385780601f1061040f57610100808354040283529160200191610438565b820191905f5260205f20905b81548152906001019060200180831161041b57829003601f168201915b50505050508152602001826004015481526020018260050154815260200160025f8581526020019081526020015f208054806020026020016040519081016040528092919081815260200182805480156104b957602002820191905f5260205f20905b81546001600160a01b0316815260019091019060200180831161049b575b50505091835250506001600160a01b0387165f908152600a8401602090815260409091205460ff16151591015284518590859081106104fa576104fa611de3565b602002602001018190525050505b600101610324565b509392505050565b5f8046617a691461053b576040516282b42960e81b815260040160405180910390fd5b5f83815260016020526040902080546001600160a01b0316610570576040516367f5230b60e11b815260040160405180910390fd5b6006015463ffffffff80821695640100000000909204169350915050565b5f81815260016020526040902080546001600160a01b03166105c3576040516367f5230b60e11b815260040160405180910390fd5b600281015460ff16156105e9576040516331ff371960e11b815260040160405180910390fd5b80546001600160a01b03163314610612576040516282b42960e81b815260040160405180910390fd5b80600101544210801561062c575080600501548160040154105b1561064a57604051632a751f8160e21b815260040160405180910390fd5b6002808201805460ff191660011790555f8381526020918252604080822080548251818602810186019093528083529293919290918301828280156106b657602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311610698575b505050505090505f5b8151811015610713576106ef83600701548383815181106106e2576106e2611de3565b60200260200101516113c3565b5061070a83600801548383815181106106e2576106e2611de3565b506001016106bf565b5060405183907f49975b326c379ec91b42c47db5f7d6ef053f2e769febd9dcb0126a0a07a1935d905f90a2505050565b5f82815260016020526040812080546001600160a01b0316610778576040516367f5230b60e11b815260040160405180910390fd5b6001600160a01b0383165f908152600a909101602052604090205460ff1690505b92915050565b5f82815260016020526040902080546001600160a01b03166107d4576040516367f5230b60e11b815260040160405180910390fd5b600281015460ff166107f957604051632a751f8160e21b815260040160405180910390fd5b80546001600160a01b03163314610822576040516282b42960e81b815260040160405180910390fd5b6108308160070154836113c3565b5061083f8160080154836113c3565b506040516001600160a01b0383169084907ffee493c21f1581d9a0b3ba5a06bc6d9ea28fe99ef5e5c6f9d66c6eb8b319178d905f90a3505050565b5f8181526001602052604090208054606091906001600160a01b03166108b3576040516367f5230b60e11b815260040160405180910390fd5b5f838152600260209081526040918290208054835181840281018401909452808452909183018282801561090e57602002820191905f5260205f20905b81546001600160a01b031681526001909101906020018083116108f0575b5050505050915050919050565b5f84815260016020526040902080546001600160a01b0316610950576040516367f5230b60e11b815260040160405180910390fd5b600281015460ff1680610967575080600101544210155b156109855760405163335b65a560e11b815260040160405180910390fd5b335f90815260098201602052604090205460ff166109b6576040516305604ceb60e31b815260040160405180910390fd5b335f908152600a8201602052604090205460ff16156109e857604051637c9a1cf960e01b815260040160405180910390fd5b5f610a288585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506113d592505050565b335f908152600b84016020526040812054919250610a4f82610a49836113e9565b856113fb565b90505f610a65610a5f60016113e9565b8361140f565b9050610a7585600701548361143d565b60078601556008850154610a89908261143d565b60088601556007850154610a9c9061146b565b50610aaa856008015461146b565b5060078501548554610ac591906001600160a01b03166113c3565b5060088501548554610ae091906001600160a01b03166113c3565b50610aeb600161147a565b335f908152600b870160205260409020819055610b079061146b565b50335f908152600a860160205260408120805460ff1916600190811790915560048701805491929091610b3b908490611e43565b909155505060405133908a907ff4a95e0ccff9e012051fb09885c2134c4034ed409e70914a95e1f7c561d206fd905f90a3505050505050505050565b610bbc6040518060e001604052805f81526020015f6001600160a01b031681526020015f81526020015f15158152602001606081526020015f81526020015f81525090565b5f82815260016020526040902080546001600160a01b0316610bf1576040516367f5230b60e11b815260040160405180910390fd5b6040805160e08101825284815282546001600160a01b03166020820152600183015491810191909152600282015460ff1615156060820152600382018054608083019190610c3e90611df7565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6a90611df7565b8015610cb55780601f10610c8c57610100808354040283529160200191610cb5565b820191905f5260205f20905b815481529060010190602001808311610c9857829003601f168201915b50505050508152602001826004015481526020018260050154815250915050919050565b46617a6914158015610cee57504662aa36a714155b15610d0b576040516282b42960e81b815260040160405180910390fd5b5f82815260016020526040902080546001600160a01b0316610d40576040516367f5230b60e11b815260040160405180910390fd5b600281015460ff1680610d57575080600101544210155b15610d755760405163335b65a560e11b815260040160405180910390fd5b335f90815260098201602052604090205460ff16610da6576040516305604ceb60e31b815260040160405180910390fd5b335f908152600a8201602052604090205460ff1615610dd857604051637c9a1cf960e01b815260040160405180910390fd5b8115610e3a57610df58160070154610df060016113e9565b61143d565b6007820155600681018054600191905f90610e1790849063ffffffff16611e56565b92506101000a81548163ffffffff021916908363ffffffff160217905550610e96565b610e4c8160080154610df060016113e9565b600882015560068101805460019190600490610e77908490640100000000900463ffffffff16611e56565b92506101000a81548163ffffffff021916908363ffffffff1602179055505b610ea3816007015461146b565b50610eb1816008015461146b565b5060078101548154610ecc91906001600160a01b03166113c3565b5060088101548154610ee791906001600160a01b03166113c3565b50610ef2600161147a565b335f908152600b830160205260409020819055610f0e9061146b565b50335f908152600a820160205260408120805460ff1916600190811790915560048301805491929091610f42908490611e43565b9091555050604051339084907ff4a95e0ccff9e012051fb09885c2134c4034ed409e70914a95e1f7c561d206fd905f90a3505050565b5f81815260016020526040812080548291906001600160a01b0316610fb0576040516367f5230b60e11b815260040160405180910390fd5b600281015460ff16610fd557604051632a751f8160e21b815260040160405180910390fd5b806007015481600801549250925050915091565b610ff161185e565b5f83815260016020526040902080546001600160a01b0316611026576040516367f5230b60e11b815260040160405180910390fd5b604080516101208101825285815282546001600160a01b03166020820152600183015491810191909152600282015460ff161515606082015260038201805460808301919061107490611df7565b80601f01602080910402602001604051908101604052809291908181526020018280546110a090611df7565b80156110eb5780601f106110c2576101008083540402835291602001916110eb565b820191905f5260205f20905b8154815290600101906020018083116110ce57829003601f168201915b50505050508152602001826004015481526020018260050154815260200160025f8781526020019081526020015f2080548060200260200160405190810160405280929190818152602001828054801561116c57602002820191905f5260205f20905b81546001600160a01b0316815260019091019060200180831161114e575b50505091835250506001600160a01b039094165f908152600a909201602090815260409092205460ff161515919093015250919050565b5f8281036111c4576040516305604ceb60e31b815260040160405180910390fd5b5f8081546111d190611e7a565b91829055505f81815260016020526040902080546001600160a01b031916331781559091506112008342611e43565b600182015560038101611214878983611ede565b5060028101805460ff191690555f600482018190556005820185905560068201805467ffffffffffffffff1916905561124c906113e9565b600782015561125a5f6113e9565b6008820155600781015461126d9061146b565b5061127b816008015461146b565b5061128a8160070154336113c3565b506112998160080154336113c3565b505f5b84811015611341575f8686838181106112b7576112b7611de3565b90506020020160208101906112cc9190611f98565b6001600160a01b0381165f9081526009850160209081526040808320805460ff19908116600117909155600a88019092528220805490911690559091506113129061147a565b6001600160a01b0382165f908152600b8501602052604090208190556113379061146b565b505060010161129c565b505f82815260026020526040902061135a9086866118b0565b50600380546001810182555f9182527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01839055604051339184917f114f7d75e6fa54e0288ebc602fe66be2cb832e0262834313f06dc8ff06839cb89190a35095945050505050565b5f6113ce8383611495565b5090919050565b5f6113e28383600461150b565b9392505050565b5f6107998263ffffffff166004611605565b5f611407848484611694565b949350505050565b5f826114215761141e5f6113e9565b92505b816114325761142f5f6113e9565b91505b6113e283835f61172a565b5f8261144f5761144c5f6113e9565b92505b816114605761145d5f6113e9565b91505b6113e283835f6117e7565b5f6114768230611495565b5090565b5f61079982611489575f61148c565b60015b60ff165f611605565b5f5f805160206120558339815191528054604051635ca4b5b160e11b8152600481018690526001600160a01b03858116602483015292935091169063b9496b62906044015f604051808303815f87803b1580156114f0575f80fd5b505af1158015611502573d5f803e3d5ffd5b50505050505050565b5f805160206120358339815191525460405163196d0b9b60e01b81525f915f80516020612055833981519152916001600160a01b039091169063196d0b9b9061155e908890339089908990600401611fd1565b6020604051808303815f875af115801561157a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061159e9190612009565b8154604051630f8e573b60e21b8152600481018390523360248201529193506001600160a01b031690633e395cec906044015f604051808303815f87803b1580156115e7575f80fd5b505af11580156115f9573d5f803e3d5ffd5b50505050509392505050565b5f8051602061203583398151915254604051639cd07acb60e01b81525f915f80516020612055833981519152916001600160a01b0390911690639cd07acb906116549087908790600401612020565b6020604051808303815f875af1158015611670573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114079190612009565b5f805f805160206120558339815191526001810154604051637702dcff60e01b81526004810188905260248101879052604481018690529192506001600160a01b031690637702dcff906064016020604051808303815f875af11580156116fd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117219190612009565b95945050505050565b5f80821561173d5750600160f81b611740565b505f5b5f80516020612035833981519152546040516303056db360e31b815260048101879052602481018690526001600160f81b0319831660448201525f80516020612055833981519152916001600160a01b03169063182b6d98906064015b6020604051808303815f875af11580156117b9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117dd9190612009565b9695505050505050565b5f8082156117fa5750600160f81b6117fd565b505f5b5f805160206120358339815191525460405163022f65e760e31b815260048101879052602481018690526001600160f81b0319831660448201525f80516020612055833981519152916001600160a01b03169063117b2f389060640161179d565b6040518061012001604052805f81526020015f6001600160a01b031681526020015f81526020015f15158152602001606081526020015f81526020015f8152602001606081526020015f151581525090565b828054828255905f5260205f20908101928215611901579160200282015b828111156119015781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906118ce565b506114769291505b80821115611476575f8155600101611909565b602080825282518282018190525f9190848201906040850190845b8181101561195357835183529284019291840191600101611937565b50909695505050505050565b5f8083601f84011261196f575f80fd5b50813567ffffffffffffffff811115611986575f80fd5b6020830191508360208260051b85010111156119a0575f80fd5b9250929050565b80356001600160a01b03811681146119bd575f80fd5b919050565b5f805f604084860312156119d4575f80fd5b833567ffffffffffffffff8111156119ea575f80fd5b6119f68682870161195f565b9094509250611a099050602085016119a7565b90509250925092565b5f81518084525f5b81811015611a3657602081850181015186830182015201611a1a565b505f602082860101526020601f19601f83011685010191505092915050565b5f815180845260208085019450602084015f5b83811015611a8d5781516001600160a01b031687529582019590820190600101611a68565b509495945050505050565b5f610120825184526020830151611aba60208601826001600160a01b03169052565b50604083015160408501526060830151611ad8606086018215159052565b506080830151816080860152611af082860182611a12565b91505060a083015160a085015260c083015160c085015260e083015184820360e0860152611b1e8282611a55565b91505061010080840151611b358287018215159052565b5090949350505050565b5f60208083016020845280855180835260408601915060408160051b8701019250602087015f5b82811015611b9457603f19888603018452611b82858351611a98565b94509285019290850190600101611b66565b5092979650505050505050565b5f60208284031215611bb1575f80fd5b5035919050565b5f8060408385031215611bc9575f80fd5b82359150611bd9602084016119a7565b90509250929050565b602080825282518282018190525f9190848201906040850190845b818110156119535783516001600160a01b031683529284019291840191600101611bfd565b5f8083601f840112611c32575f80fd5b50813567ffffffffffffffff811115611c49575f80fd5b6020830191508360208285010111156119a0575f80fd5b5f805f8060608587031215611c73575f80fd5b8435935060208501359250604085013567ffffffffffffffff811115611c97575f80fd5b611ca387828801611c22565b95989497509550505050565b602081528151602082015260018060a01b036020830151166040820152604082015160608201526060820151151560808201525f608083015160e060a0840152611cfd610100840182611a12565b905060a084015160c084015260c084015160e08401528091505092915050565b5f8060408385031215611d2e575f80fd5b8235915060208301358015158114611d44575f80fd5b809150509250929050565b602081525f6113e26020830184611a98565b5f805f805f60608688031215611d75575f80fd5b853567ffffffffffffffff80821115611d8c575f80fd5b611d9889838a01611c22565b90975095506020880135915080821115611db0575f80fd5b50611dbd8882890161195f565b96999598509660400135949350505050565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b600181811c90821680611e0b57607f821691505b602082108103611e2957634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561079957610799611e2f565b63ffffffff818116838216019080821115611e7357611e73611e2f565b5092915050565b5f60018201611e8b57611e8b611e2f565b5060010190565b601f821115611ed957805f5260205f20601f840160051c81016020851015611eb75750805b601f840160051c820191505b81811015611ed6575f8155600101611ec3565b50505b505050565b67ffffffffffffffff831115611ef657611ef6611dcf565b611f0a83611f048354611df7565b83611e92565b5f601f841160018114611f3b575f8515611f245750838201355b5f19600387901b1c1916600186901b178355611ed6565b5f83815260208120601f198716915b82811015611f6a5786850135825560209485019460019092019101611f4a565b5086821015611f86575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b5f60208284031215611fa8575f80fd5b6113e2826119a7565b60548110611fcd57634e487b7160e01b5f52602160045260245ffd5b9052565b8481526001600160a01b03841660208201526080604082018190525f90611ffa90830185611a12565b90506117216060830184611fb1565b5f60208284031215612019575f80fd5b5051919050565b828152604081016113e26020830184611fb156fe9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497019e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649700a26469706673582212203e83ee046b39a02ad72dcf5138eb7afdf5acfb851f01c82207cfc0fac600769d64736f6c63430008180033";

type JuryChainConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: JuryChainConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class JuryChain__factory extends ContractFactory {
  constructor(...args: JuryChainConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      JuryChain & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): JuryChain__factory {
    return super.connect(runner) as JuryChain__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): JuryChainInterface {
    return new Interface(_abi) as JuryChainInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): JuryChain {
    return new Contract(address, _abi, runner) as unknown as JuryChain;
  }
}
